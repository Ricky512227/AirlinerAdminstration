Connection Events:

before_connect: Triggered before a connection to the database is established.
after_connect: Triggered after a connection to the database is established.








Operation Events:
before_insert:
This event is triggered before an object is inserted into the database. It provides an opportunity to perform custom actions or modifications to the object's data before it is persisted.

after_insert:
This event is triggered after an object has been successfully inserted into the database. It can be used for tasks that need to be performed after the data has been added to the database.

before_update:
This event is triggered before an object's data is updated in the database. It allows you to make changes or validations to the object's data before it is updated.

after_update:
This event is triggered after an object's data has been updated in the database. It can be used for tasks that need to be performed after the data has been modified.

before_delete:
This event is triggered before an object is deleted from the database. It provides an opportunity to perform custom actions or validations before the object is removed.

after_delete:
This event is triggered after an object has been successfully deleted from the database. It can be used for tasks that need to be performed after the object has been removed.




Transaction Events:
before_begin: Triggered before a new transaction is begun.
after_begin: Triggered after a new transaction is begun.
before_commit: Triggered before a transaction is committed.
after_commit: Triggered after a transaction is committed.
before_rollback: Triggered before a transaction is rolled back.
after_rollback: Triggered after a transaction is rolled back.
Session Events:

before_flush: Triggered before the session is flushed.
after_flush: Triggered after the session is flushed.
after_flush_postexec: Triggered after the session is flushed and any SQL expressions in the "post_flush" queue are executed.
before_commit: Triggered before a session is committed.
after_commit: Triggered after a session is committed.
before_rollback: Triggered before a session is rolled back.
after_rollback: Triggered after a session is rolled back.
before_close: Triggered before a session is closed.
Query Events:

before_compile: Triggered before a query is compiled.
after_compile: Triggered after a query is compiled.
before_execute: Triggered before a query is executed.
after_execute: Triggered after a query is executed.
Model Events:

mapper_configured: Triggered after a mapper is fully configured.
init: Triggered when a new instance of a mapped class is created.
Other Events:

do_orm_execute: Triggered before an ORM-level execution is performed.
do_sql_execute: Triggered before an SQL execution is performed.

These are just some of the many events provided by SQLAlchemy. You can use these events to customize and enhance the behavior of your SQLAlchemy-based applications. To use an event, you typically use the event.listen method to attach a function to a specific event. The attached function will be called when the event is triggered.

For more information on these events and how to use them, refer to the official SQLAlchemy documentation: https://docs.sqlalchemy.org/en/20/core/event.html
