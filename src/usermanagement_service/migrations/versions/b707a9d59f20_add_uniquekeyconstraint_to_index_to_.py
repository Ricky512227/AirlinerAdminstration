"""Add UniquekeyConstraint to index to username and email

Revision ID: b707a9d59f20
Revises: 40c28f8c1faa
Create Date: 2023-09-08 00:13:27.655639

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'b707a9d59f20'
down_revision = '40c28f8c1faa'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index('idx_email')
        batch_op.drop_index('idx_username')

    op.drop_table('users')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'users',
        sa.Column('ID', sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column('Username',
                  sa.VARCHAR(length=255),
                  autoincrement=False,
                  nullable=False),
        sa.Column('FirstName',
                  sa.VARCHAR(length=255),
                  autoincrement=False,
                  nullable=False),
        sa.Column('LastName',
                  sa.VARCHAR(length=255),
                  autoincrement=False,
                  nullable=False),
        sa.Column('Email',
                  sa.VARCHAR(length=255),
                  autoincrement=False,
                  nullable=False),
        sa.Column('DateOfBirth',
                  sa.VARCHAR(length=255),
                  autoincrement=False,
                  nullable=False),
        sa.Column('Password',
                  sa.VARCHAR(length=255),
                  autoincrement=False,
                  nullable=False),
        sa.Column('CreatedAt',
                  postgresql.TIMESTAMP(),
                  autoincrement=False,
                  nullable=False),
        sa.Column('UpdatedAt',
                  postgresql.TIMESTAMP(),
                  autoincrement=False,
                  nullable=False),
        sa.PrimaryKeyConstraint('ID', name='users_pkey'),
        sa.UniqueConstraint('Email', name='users_Email_key'),
        sa.UniqueConstraint('Username', name='users_Username_key'))
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index('idx_username', ['Username'], unique=False)
        batch_op.create_index('idx_email', ['Email'], unique=False)

    # ### end Alembic commands ###
